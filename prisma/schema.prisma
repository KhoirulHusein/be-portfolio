generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  username       String         @unique
  passwordHash   String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  refreshTokens  RefreshToken[]
  roles          UserRole[]

  @@index([email])
  @@index([username])
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  revoked    Boolean  @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@index([userId])
  @@index([expiresAt])
  @@index([token])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]

  @@index([name])
}

model Permission {
  id          String           @id @default(cuid())
  key         String           @unique // e.g. "user:read"
  description String?
  roles       RolePermission[]

  @@index([key])
}

model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Restrict)

  assignedAt DateTime @default(now())

  @@id([userId, roleId])
  @@index([roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model About {
  id           String    @id @default(cuid())
  headline     String    // misal: "Backend Engineer"
  subheadline  String?   // misal: "Enjoys building APIs & tooling"
  bio          String    // markdown / long text
  avatarUrl    String?   // URL gambar
  location     String?
  emailPublic  String?
  phonePublic  String?
  links        Json?     // { github, linkedin, twitter, website, ... }
  skills       String[]  // Postgres text[]
  published    Boolean   @default(false)

  createdBy    String?
  updatedBy    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([published])
  @@index([updatedAt])
}

model Experience {
  id             String    @id @default(cuid())
  company        String
  role           String
  companyLogoUrl String?
  startDate      DateTime
  endDate        DateTime?  // null = current
  location       String?
  employmentType String?    // Full-time, Contract, dll
  summary        String?
  highlights     String[]   // bullets
  techStack      String[]   // tags
  order          Int       @default(0) // opsional untuk manual sorting
  published      Boolean   @default(true) // default boleh tampil publik

  createdBy      String?
  updatedBy      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([startDate])
  @@index([order])
  @@index([published])
}

model Project {
  id             String        @id @default(cuid())
  title          String        // nama project yang tampil di kartu/detail
  slug           String        @unique // URL-friendly id untuk akses publik
  summary        String?       // deskripsi singkat untuk kartu/list
  description    String?       // konten markdown/deskripsi lengkap
  coverImageUrl  String?       // URL gambar utama project
  galleryUrls    String[]      // list URL gambar tambahan (opsional)
  repoUrl        String?       // link repo utama (GitHub/GitLab)
  liveUrl        String?       // link demo/live site jika ada
  videoUrl       String?       // link demo video (YouTube/Vimeo)
  links          Json?         // link lain (docs, blogpost, npm, app store)
  techStack      String[]      // list technology utama (untuk filter)
  tags           String[]      // tag tematik (untuk pencarian/cluster)
  status         ProjectStatus // enum: ONGOING | COMPLETED | ARCHIVED
  featured       Boolean       @default(false) // untuk spotlight di landing
  order          Int?          // manual ordering (naik di list admin)
  startDate      DateTime?     // kapan mulai
  endDate        DateTime?     // kapan selesai (opsional)
  published      Boolean       @default(false) // visibilitas publik

  createdBy      String?
  updatedBy      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([published])
  @@index([featured])
  @@index([status])
  @@index([updatedAt])
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  ARCHIVED
}

model Setting {
  key   String @id
  value String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
